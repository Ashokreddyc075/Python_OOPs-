We have 3 types of variables:
============================
1.Instance Variables
2.Static Variables 
3.Local Variables 

Instance Variables:
==================
class Test:
    def __init__(self): #constructor
        pass
t = Test()

self():
======
1.self is a reference variable, which always pointing to the current object. Within the python class to access current object.
2.The first argument to the constructor always self. Self or 1st argument always mandatory.
3.we are not required to provide self-variable to the constructor PVM itself provide the value.
4.we can use self always with in the class, inside the constructor, we can use self-declare object variable (Instance Variable)
5.Self is not a keyword we can use any name delf,kelf,etc...but recommended to use self.

constructor:
===========
1.The name of the constructor is always __init__()
2.We are not required to call constructor explicitly.It will be executed automatically when we are creating object 
3.per object constructor excecuted only one time.
4.constructor  should take at least one argument.
              Ex:
              ==
              class Student:
                  def __init__(self,name,rollno,marks):
                      self.name = name
                      self.marks = marks
                      self.rollno = rollno
              s1=Student("ashok",100,101)
              print("Student detiles===",s1.name,s1.marks,s1.rollno)
5.The purpose of constructor is to declare and instanve variables
          __init__() ---> initialization
6.With in the python class constructor is optional.If we are not providing default constructor will be provided by PVM
              class Test:
                  def m1(self,name,rollno,marks):
                      self.name = name
                      self.marks = marks
                      self.rollno = rollno
              t= Test()

7.we can call constructor explicitly,then it will be executed just like a normal method and new object won't be created.

                class Test:
                    def __init__(self):
                        print("abcdefghi")
                t = Test()
                t.__init__()
8.Constructor overloading not possible in python.if we are try to declare multiple constructor,PVM will always consider only last Constructor
















