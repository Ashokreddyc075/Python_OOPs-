instance Variables:
===================
If the value is varied from object to object such type of variable is called an instance variable
For every object separate copy will be created
In general, we can define instance variables inside the constructor by using self.
Various Places to declare instance variable:
Inside the constructor by using self
Inside the instance method by using self.
outside the class by using object reference
Example:
class Test:
    def __init__(self):
        self.a = 10
        self.b =20
    def m1(self):
        self.c = 20
t = Test()
t.m1()
t.e = 30
print(t.__dict__) 
#output == {'a': 10, 'b': 20, 'c': 20, 'e': 30}

access instance variables:
==========================
Within the class by using self
outside the class by using object reference
Example:
class Test:
    def __init__(self):
        self.a = 20
        self.b = 30
    def m1(self):
        print(self.a)
        print(self.b)
T =Test()
T.m1()
print(T.a)
print(T.b)

How to delete instance variables:
=================================
Within the class
          del self.variable name
   2. outside of the class
          del object reference. variable namE
Example:
class Test:
    def __init__(self):
        self.a = 20
        self.b = 30
        self.c = 30
    def m1(self):
        del self.a
t = Test()
t.m1()
del t.c
print(t.__dict__)


Static Variables:
===================
If the value of the variable is not varied from object to object only one copy will be created.

Generally, we can declare static variables within the class directly
Inside Constructor and inside method by using the class name.
Inside class method by using either class name or cls variable
Inside static method by using class name
From outside of the class by using the class name
Example:

class Test:
    a = 20
    def __init__(self):
        Test.b=30
    def m1(self):
        c =30
    @classmethod
    def m2(cls):
        Test.d=30
        cls.e=40
    @staticmethod
    def m3():
        Test.f=50
t=Test()
t.m1()
Test.g = 60
Test.m2()
Test.m3()
print(Test.__dict__)

To Access Static variables.
=========================
Example

class Test:
    a = "Ashok Reddy"
    def __init__(self):
        print(Test.a)
    def m1(self):
        print(Test.a)
    @classmethod
    def m2(cls):
        print(Test.a)
    @staticmethod
    def m3():
        print(Test.a)
        
t =Test()
t.m1()
Test.m2()
Test.m3()
print(t.a)
print(Test.a)


Update static variable.
======================
We should update the value of the static variable either by class name or by cls variable. We can use self or object reference to update static variable
Example:

class Test:
    a = 20
    def __init__(self):
        self.b = 30
t1 = Test()
t2 = Test()
print("t1::::::",t1.a,t1.b)
print("t2::::::",t2.a,t2.b)
t1.a = 88888
t2.b = 99999
print("t1::::::",t1.a,t1.b)
print("t2::::::",t2.a,t2.b)

How to delete a static variable
================================
Anywhere: del class name. variable name
class method: del cls. variable name
Example:

class Test:
    a = "Data"
    def __init__(self):
        Test.b = "Science"
        del Test.a
    def m1(self):
        Test.c="pavan"
        del Test.b
    @classmethod
    def m2(cls):
        Test.d = 200
        del Test.c
    @staticmethod
    def m3():
        Test.e=3000
        del Test.d
t=Test()
t.m1()
Test.m2()
Test.m3()
print(Test.__dict__)


Local variable:
==============
We can declare a variable inside a method directly called a local variable/method level/Temporary variable.
The local variable will be created at the time of method execution and automatically destroyed once the method completes.
local variable of the method cant be accessed from outside of the method
Example:

class Test:
    a = 20
    def __init__(self):
        self.a =20
    def m1(self):
        b = 20
    def m2(x):
        x = 10
        for i in range(x):
            print(i)
t=Test()
t.m2()
print(Test.__dict__)




















    
